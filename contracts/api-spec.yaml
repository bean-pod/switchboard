openapi: 3.0.2

info:
  version: 1.0.0
  title: 'Switchboard API'
  description: 'API for the switchboard service'

servers:
  - url: http://localhost:8080/v1
    description: Local Enviorment

paths:
  /log/{serialNumber}:
    get:
      operationId: retrieveDeviceLogs
      description: Get a list of logs for a specific device
      parameters:
        - $ref: '#/components/parameters/DeviceSerialNumber'
      responses:
        '200':
          description: Succesful retrieval of the device logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsModel'

  /log/stream/{streamId}:
    get:
      operationId: retrieveStreamLogs
      description: Get a list of logs for a specific stream
      parameters:
        - $ref: '#/components/parameters/StreamId'
      responses:
        '200':
          description: Succesful retrieval of the stream logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamLogsModel'

  /user/sign-up:
    post:
      operationId: sign-up
      description: sign up a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModel'
      responses:
        '200':
          description: succesful persistance of user
          content:
            application/json:
              schema:
                type: string
                example: 'User moh has been created successfully'

  /log:
    get:
      operationId: retrieveAllLogs
      description: Get a list of logs
      responses:
        '200':
          description: Successful retrival of logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsModel'
    post:
      operationId: createLog
      description: Create a log
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogRequest'
      responses:
        '200':
          description: Successful creation of a log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogModel'
  /device:
    get:
      operationId: retrieveAllDevices
      description: Get a list of available devices
      tags:
        - Devices
      responses:
        '200':
          description: Successful retrival of device list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicesModel'
    post:
      operationId: createDevice
      description: Create a new device
      tags:
        - Devices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequest'
      responses:
        '200':
          description: Successful creation of device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceModel'
    put:
      operationId: updateDevice
      description: Update the properties of a device
      tags:
        - Devices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceModel'
      responses:
        '200':
          description: Succesful update of the device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceModel'

  /device/{serialNumber}:
    get:
      operationId: retrieveDevice
      description: Retrieve a single device
      parameters:
        - $ref: '#/components/parameters/DeviceSerialNumber'
      tags:
        - Devices
      responses:
        '200':
          description: Succesful retrieval of the device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceModel'
    delete:
      operationId: deleteDevice
      description: Deletes a device from the database
      parameters:
        - $ref: '#/components/parameters/DeviceSerialNumber'
      tags:
        - Devices
      responses:
        '200':
          description: Succesful deletion of the device
          content:
            application/json:
              schema:
                type: string
                example: 'Device with serial number BtmC8ckj deleted'

  /device/config/{serialNumber}:
    put:
      operationId: upload configuration
      description: uploads a configuration file
      parameters:
        - $ref: '#/components/parameters/DeviceSerialNumber'
      tags:
        - Devices
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                configuration:
                  type: string
                  format: binary
      responses:
        '200':
          description: successful upload of config file
          content:
            text/plain:
              schema:
                type: string
                example: config file successfully uploaded

  /encoder:
    get:
      operationId: retrieveAllEncoders
      description: Get a list of available encoders
      tags:
        - Encoders
      responses:
        '200':
          description: Successful retrieval of encoder list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncodersModel'
    post:
      operationId: createEncoder
      description: Create a new encoder device
      tags:
        - Encoders
      requestBody:
        description: The serial number of the device which should be registered as an encoder
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEncoderRequest'
      responses:
        '200':
          description: Successful creation the encoder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncoderModel'


  /encoder/{serialNumber}:
    get:
      operationId: getEncoderById
      description: Retrieve a specific encoder
      tags:
        - Encoders
      parameters:
        - $ref: '#/components/parameters/EncoderSerialNumber'
      responses:
        '200':
          description: Successful retrieval of the encoder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncoderModel'
    put:
      operationId: updateEncoder
      description: Update a encoder's definition
      tags:
        - Encoders
      parameters:
        - $ref: '#/components/parameters/EncoderSerialNumber'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncoderModel'
      responses:
        '200':
          description: Successful update of the Encoder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncoderModel'
    delete:
      operationId: deleteEncoder
      description: Delete a encoder
      tags:
        - Encoders
      parameters:
        - $ref: '#/components/parameters/EncoderSerialNumber'
      responses:
        '200':
          description: Successful deletion of the encoder

  /encoder/{serialNumber}/stream:
    get:
      operationId: getEncoderStreams
      description: Retrieve the sending streams for the encoder
      tags:
        - Encoders
        - Streams
      parameters:
        - $ref: '#/components/parameters/EncoderSerialNumber'
      responses:
        '200':
          description: Successful retrieval of video streams for an encoder
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamModel'

  /decoder:
    get:
      operationId: retrieveAllDecoders
      description: Get a list of available decoders serial numbers
      tags:
        - Decoders
      responses:
        '200':
          description: Successful retrieval of decoder list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecodersModel'
    post:
      operationId: createDecoder
      description: Create a new decoder client
      tags:
        - Decoders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDecoderRequest'
      responses:
        '200':
          description: Successful creation of the decoder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecoderModel'

  /decoder/{serialNumber}:
    get:
      operationId: getDecoderById
      description: Retrieve a specific decoder
      tags:
        - Decoders
      parameters:
        - $ref: '#/components/parameters/DecoderSerialNumber'
      responses:
        '200':
          description: Successful retrieval of the decoder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecoderModel'
    put:
      operationId: updateDecoder
      description: Update a decoder's definition
      tags:
        - Decoders
      parameters:
        - $ref: '#/components/parameters/DecoderSerialNumber'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecoderModel'
      responses:
        '200':
          description: Successful update of the decoder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecoderModel'
    delete:
      operationId: deleteDecoder
      description: Delete a decoder
      tags:
        - Decoders
      parameters:
        - $ref: '#/components/parameters/DecoderSerialNumber'
      responses:
        '200':
          description: Successful deletion of the decoder

  /decoder/{serialNumber}/stream:
    get:
      operationId: getDecoderStreams
      description: Retrieve the sending streams for the decoder
      tags:
        - Decoders
        - Streams
      parameters:
        - $ref: '#/components/parameters/DecoderSerialNumber'
      responses:
        '200':
          description: Successful retrieval of video streams for a decoder
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreamModel'

  /stream:
    get:
      operationId: getStreams
      description: Retrieve all the existing streams
      tags:
        - Streams
      responses:
        '200':
          description: Successful retrieval of video streams
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamsModel'
    post:
      operationId: createStream
      description: Create a new stream between an input and output channel
      tags:
        - Streams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStreamRequest'
      responses:
        '200':
          description: Successful creation of the stream
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamModel'
    put:
      operationId: updateStream
      description: update a stream's definition
      tags:
        - Streams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamModel'
      responses:
        '200':
          description: Successful update of the stream
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamModel'

  /stream/{id}:
    get:
      operationId: getStreamById
      description: Retrieve a stream's definition
      tags:
        - Streams
      parameters:
        - $ref: '#/components/parameters/StreamId'
      responses:
        '200':
          description: Succesful retrieval of a stream
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamModel'
    delete:
      operationId: deleteStream
      description: Delete a stream
      tags:
        - Streams
      parameters:
        - $ref: '#/components/parameters/StreamId'
      responses:
        '200':
          description: Successful deletion of the stream

  /stream/statistics/{id}:
    get:
      operationId: getStreamStatById
      description: Retrieve a stream stat by id
      tags:
        - Streams
      parameters:
        - $ref: '#/components/parameters/StreamId'
      responses:
        '200':
          description: Succesful retrievel of a stream stat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamStatModel'

  /stream/statistics:
    get:
      operationId: retrieveStreamStats
      description: Retrieve all the existing stream statistics
      tags:
        - Streams
      responses:
        '200':
          description: Successful retrieval of stream statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamStatsModel'
    put:
      operationId: updateStreamStat
      description: update a stream's stat
      tags:
        - Streams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamStatModel'
      responses:
        '200':
          description: successful update of a stream stat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamStatModel'
components:
  schemas:
    UserModel:
      description: A user object
      properties:
        id:
          type: integer
          format: int64
          example: '123'
        username:
          type: string
          example: 'moh@gmail.com'
        password:
          type: string
          example: '123#rt.'
        userRole:
          type: string
          enum:
            - ADMIN
            - USER
            - SUPERUSER
          example: 'ADMIN'

    LogsModel:
      description: A list of all logs
      type: array
      items:
        $ref: '#/components/schemas/LogModel'

    LogModel:
      description: a log object
      properties:
        id:
          type: integer
          format: int64
          example: '123'
        dateTime:
          type: string
          format: date-time
        message:
          type: string
          example: 'A log message'
        level:
          type: string
          example: 'info'
        serialNumber:
          type: string
          example: '1,2'

    CreateLogRequest:
      description: A request to create a new log
      properties:
        dateTime:
          type: string
          pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0[0-9]|1[0-9]|2[0-4])(\+00:00)$'
          example: '2021-02-04T08:21:23+00:00'
        message:
          type: string
          example: 'A log message'
        level:
          type: string
          example: 'info'
        serialNumber:
          type: string
          example: '1xw1'

    StreamLogModel:
      description: stream log object
      properties:
        id:
          type: integer
          format: int64
          example: '123'
        serialNumber:
          type: string
          example: '1rw1'
        streamId:
          type: integer
          example: '123'
        logEntity:
          $ref: '#/components/schemas/LogModel'

    StreamLogsModel:
      description: A list of SteamLog objects
      type: array
      items:
        $ref: '#/components/schemas/StreamLogModel'

    DevicesModel:
      description: A list of device serial numbers
      type: array
      items:
        $ref: '#/components/schemas/DeviceModel'

    DeviceModel:
      description: A device thats either an  encoder or decoder
      properties:
        serialNumber:
          type: string
          example: 'BtmC8ckj'
        publicIpAddress:
          type: string
          example: '178.156.52.3'
        privateIpAddress:
          type: string
          example: '192.168.0.129'
        displayName:
          type: string
          example: 'Device 1'
        status:
          type: string
          example: 'running'
        configurationInstance:
          type: string
          format: byte
        configurationLastModified:
          type: string
          format: date-time

    CreateDeviceRequest:
      description: A request to create a new device
      properties:
        serialNumber:
          type: string
          example: 'BtmC8ckj'
        privateIpAddress:
          type: string
          example: '192.168.0.129'
        displayName:
          type: string
          example: 'Device 1'
        status:
          type: string
          example: 'running'

    EncodersModel:
      description: A list of encoders registered to the service
      type: array
      items:
        $ref: '#/components/schemas/EncoderModel'

    EncoderModel:
      description: A client that sends a video stream
      properties:
        serialNumber:
          type: string
          example: 'BtmC8ckj'
        device:
          $ref: '#/components/schemas/DeviceModel'
        output:
          type: array
          items:
            $ref: '#/components/schemas/OutputChannelModel'

    CreateEncoderRequest:
      description: A client that sends a video stream
      properties:
        serialNumber:
          type: string
          example: 'BtmC8ckj'

    DecodersModel:
      description: A list of decoder UUIDs
      type: array
      items:
        $ref: '#/components/schemas/DecoderModel'

    DecoderModel:
      description: A client that receives a video stream
      properties:
        serialNumber:
          type: string
          example: 'v7BM3ejS'
        device:
          $ref: '#/components/schemas/DeviceModel'
        input:
          type: array
          items:
            $ref: '#/components/schemas/InputChannelModel'

    CreateDecoderRequest:
      description: Body for the creation of a decoder object
      properties:
        serialNumber:
          type: string
          example: 'v7BM3ejS'

    ChannelModel:
      description: Parent for input and output channels
      properties:
        id:
          type: integer
          format: int64
          example: '123'
        name:
          type: string
          example: 'box 2'
        port:
          type: integer
          example: '2'

    OutputChannelModel:
      description: A channel through which an encoder outputs a video stream
      properties:
        id:
          type: integer
          format: int64
          example: '123'
        channel:
          $ref: '#/components/schemas/ChannelModel'
        encoder:
          $ref: '#/components/schemas/EncoderModel'

    InputChannelModel:
      description: A channel through which a decoder receives a video stream
      properties:
        id:
          type: integer
          format: int64
          example: '123'
        channel:
          $ref: '#/components/schemas/ChannelModel'
        decoder:
          $ref: '#/components/schemas/DecoderModel'

    StreamModel:
      description: A video stream connecting an input and output channel
      properties:
        id:
          type: integer
          format: int64
          example: '1234'
        inputChannel:
          $ref: '#/components/schemas/InputChannelModel'
        outputChannel:
          $ref: '#/components/schemas/OutputChannelModel'
        isRendezvous:
          description: Flag that indicates that the clients should use SRT's Rendezvous mode
          type: boolean
          example: true

    StreamsModel:
      description: A list of stream IDs
      type: array
      items:
        type: integer
        format: int64
      example: [ '1234' ]

    StreamStatsModel:
      description: A list of stream stats
      type: array
      items:
        $ref: '#/components/schemas/StreamStatModel'

    CreateStreamRequest:
      description: An object to request the creation of a stream between an input and output channel
      properties:
        inputChannelId:
          type: integer
          format: int64
          example: '1'
        outputChannelId:
          type: integer
          format: int64
          example: '2'

    StreamStatModel:
      description: A stat that is related to a specific stream
      properties:
        id:
          type: integer
          format: int64
        time:
          type: integer
          format: int64
        window:
          $ref: '#/components/schemas/WindowStatModel'
        link:
          $ref: '#/components/schemas/LinkStatModel'
        send:
          $ref: '#/components/schemas/SendStatModel'
        recv:
          $ref: '#/components/schemas/RecvStatModel'

    WindowStatModel:
      description: A statistic related to a stream
      properties:
        flow:
          type: integer
          format: int64
        congestion:
          type: integer
          format: int64
        flight:
          type: integer
          format: int64

    LinkStatModel:
      description: A statistic related to a stream
      properties:
        rtt:
          type: number
        bandwidth:
          type: number
        maxBandwidth:
          type: integer
          format: int64

    SendStatModel:
      description: A statistic related to a stream
      properties:
        packets:
          type: integer
          format: int64
        packetsLost:
          type: integer
          format: int64
        packetsDropped:
          type: integer
          format: int64
        packetsRetransmitted:
          type: integer
          format: int64
        bytes:
          type: integer
          format: int64
        bytesDropped:
          type: integer
          format: int64
        mbitRate:
          type: number

    RecvStatModel:
      description: A statistic related to a stream
      properties:
        packets:
          type: integer
          format: int64
        packetsLost:
          type: integer
          format: int64
        packetsDropped:
          type: integer
          format: int64
        packetsRetransmitted:
          type: integer
          format: int64
        packetsBelated:
          type: integer
          format: int64
        bytes:
          type: integer
          format: int64
        bytesLost:
          type: integer
          format: int64
        bytesDropped:
          type: integer
          format: int64
        mbitRate:
          type: number

  parameters:
    DeviceSerialNumber:
      in: path
      name: serialNumber
      required: true
      description: The serial number of the device
      schema:
        type: string
        example: 'BtmC8ckj'
    EncoderSerialNumber:
      in: path
      name: uuid
      required: true
      description: The serial number of an encoder
      schema:
        type: string
        example: 'BtmC8ckj'
    DecoderSerialNumber:
      in: path
      name: uuid
      required: true
      description: The serial number of a decoder
      schema:
        type: string
        example: 'v7BM3ejS'
    StreamId:
      in: path
      name: id
      required: true
      description: The ID of a stream
      schema:
        type: integer
        format: int64
        example: '1234'

tags:
  - name: Devices
    description: Devices endpoints
  - name: Encoders
    description: Encoders endpoints
  - name: Decoders
    description: Decoders endpoints
  - name: Stream
    description: Streams endpoints